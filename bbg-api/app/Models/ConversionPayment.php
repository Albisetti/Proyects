<?php

namespace App\Models;

use App\Helpers\ClaimReporting;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\SoftDeletes;

class ConversionPayment extends Model
{
    use SoftDeletes;

    protected $table = 'conversion_payment';

    protected $fillable = [
        'name',
        'conversion_type',
        'conversion_id',
        'amount',
        'payment_date',
        'note',
        'created_by',
        'updated_by'
    ];

    public function conversion(): MorphTo
    {
        return $this->morphTo();
    }

    public function save(array $options = [])
    {
        $results = parent::save($options); // TODO: Change the autogenerated stub
        $this->refresh();

        //TODO: put in transaction
        try {
            //Out-dated due to too much change to be done on a save, please use the graphql calculateClaimAllocation mutation to newly created
//            if ( $conversion = $this->conversion()->first() ){
//                switch ( get_class($conversion) ){
//                    case 'App\\Models\\ConversionFlatPayment':
//                    case 'App\\Models\\ConversionFlatPercent':
//                    case 'App\\Models\\ConversionTieredPercent':
//                    case 'App\\Models\\ConversionByActivity':
//                        $program = $conversion->program()->first();
//                        $claims = Claims::where('program_id',$program->id)
//                            ->whereNotIn('status',['ready to close', 'close'])
//                            ->has('rebateReports')
//                            ->get()
//                        ;
//
//                        foreach ( $claims as $claim ){
//                            $rebates = $claim->rebateReports()->get();
//
//                            if( !empty($rebates) ){
//                                foreach ( $rebates as $rebate ){
//
//                                    $claim_rebate = $rebate->pivot;
//                                    ClaimReporting::calculateAndSetClaimTotal($claim_rebate);
//                                }
//                            }
//                        }
//
//                        break;
//                }
//            }
        } catch (\Exception $ex){
            throw $ex;
        }

        return $results;
    }
}
