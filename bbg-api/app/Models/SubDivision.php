<?php

namespace App\Models;

use App\Events\SubdivisionCreated;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Laravel\Scout\Searchable;

class SubDivision extends Model
{
    use HasFactory, Searchable, SoftDeletes;

    protected $fillable = ["name", "property_id","organization_id"];

    public function houses() : HasMany
    {
        return $this->hasMany(Houses::class,"subdivision_id");
    }

    public function property() : HasOne
    {
        return $this->hasOne(Property::class, "id", "property_id");
    }

    public function organization(): BelongsTo
    {
        return $this->belongsTo(Organizations::class, 'organization_id');
    }

    public function save(array $options = [])
    {
        $result = parent::save($options); // TODO: Change the autogenerated stub
        $this->refresh();

        if( !isset($options['notification']) || $options['notification'] === false)
        event( new SubdivisionCreated($this));

        return $result;
    }

    public static function countSubdivisionsOfRebates( $rebates ){

        if( !$rebates ) return [
            'subdivisionCount'=>0,
            'subdivisions'=>0
        ];

        $subdivisions = collect([]);

        foreach ($rebates as $rebate){
            $house=$rebate->houses()->with(['subdivision'])->first();
            if(isset($house->subdivision))
            $subdivisions = $subdivisions->push($house->subdivision);
        }

        $subdivisions=$subdivisions->unique('id');

        return [
            'subdivisionCount'=>$subdivisions->count(),
            'subdivisions'=>$subdivisions
        ];
    }
}
