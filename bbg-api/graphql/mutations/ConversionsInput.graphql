input ConversionFlatPaymentInput {
    name: String
    program: ProgramBelongsToCreate
    amount: Float
    bonus_amount: Float
    anticipated_payment_date: Date
    created_by: Int
    updated_by: Int
}

input ConversionFlatPercentInput {
    name: String
    program: ProgramBelongsToCreate
    anticipated_payment_date: Date
    bonus_percent: Float
    max_amount: Float
    spend_time_range: ConversionTimeRange
    clock_start: Date
    created_by: Int
    updated_by: Int
}

input ConversionTieredPercentInput {
    name: String
    program: ProgramBelongsToCreate
    anticipated_payment_date: Date
    tiers: ConversionTieredPercentTiersInput
    max_amount: Float
    valid_period: ConversionTimeRange
    clock_start: Date
    created_by: Int
    updated_by: Int
}

input ConversionTieredPercentTiersInput {
    create: [ConversionTieredPercentTiersCreateInput]
    upsert: [ConversionTieredPercentTiersUpsertInput]
    disconnect: [ID]
}

input ConversionTieredPercentTiersUpsertInput {
    id: Int
    bonus_amount: Float
    spend_exceed: Float
    note: String
}

input ConversionTieredPercentTiersCreateInput {
    bonus_amount: Float
    spend_exceed: Float
    note: String
}

input CreateConversionByActivityInput {
    name: String
    program: ProgramBelongsToCreate
    measure_unit: ConversionActivityUnit
    trigger_amount: Float
    bonus_name: String
    bonus_type: ConversionActivityType
    bonus_amount: Float
    residential_bonus_amount: Float
    multi_unit_bonus_amount: Float
    commercial_bonus_amount: Float
    product_included: ConversionActivityProduct
    products: ConverionActivityProductRelation
    created_by: Int
    updated_by: Int
}

input ConversionByActivityInput {
    name: String
    program: ProgramBelongsToCreate
    measure_unit: ConversionActivityUnit
    trigger_amount: Float
    bonus_name: String
    bonus_type: ConversionActivityType
    bonus_amount: Float
    residential_bonus_amount: Float
    multi_unit_bonus_amount: Float
    commercial_bonus_amount: Float
    product_included: ConversionActivityProduct
    products: ConverionActivityProductRelation
    created_by: Int
    updated_by: Int
}

enum conversionType {
    FLAT @enum(value:"App\\Models\\ConversionFlatPayment")
    PERCENT @enum(value:"App\\Models\\ConversionFlatPercent")
    TIERED @enum(value:"App\\Models\\ConversionTieredPercent")
    BY_ACTIVITY @enum(value:"App\\Models\\ConversionByActivity")
}

input ConversionPaymentInput {
    conversion_type: conversionType
    conversion_id: Int
    amount: Float
    payment_date: Date
    note: String
    created_by: Int
    updated_by: Int
}

input ConverionActivityProductRelation {
    connect: [ConverionActivityProductRelationInput]
    sync: [ConverionActivityProductRelationInput]
    syncWithoutDetaching: [ConverionActivityProductRelationInput]
    disconnect: [ID]
}

input ConverionActivityProductRelationInput {
    id: ID @rules(apply: ["required","exists:products,id"])
    new_rebate_amount: Float
    residential_bonus_amount: Float
    multi_unit_bonus_amount: Float
    commercial_bonus_amount: Float
}
